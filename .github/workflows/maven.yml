# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
     - name: Checkout Wonder Source Code
       uses: actions/checkout@v3
       with:
         ref: ${{ github.event.inputs.branch }}

     - name: Cache local Maven repository
       uses: actions/cache@v3
       with:
         path: ~/.m2/repository
         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
         restore-keys: |
           ${{ runner.os }}-maven-
     - name: Set up JDK 1.8
       uses: actions/setup-java@v3
       with:
          java-version: 8
          distribution: 'temurin'
          cache: 'maven'
    #- name: Build with Maven
    #  run: mvn install -Ddisable.tests=true -DskipTests=true -Dmaven.test.skip=true --file pom.xml
    #- run: mkdir staging && cp target/*.jar staging
    #- uses: actions/upload-artifact@v3
    #  with:
    #    name: Package
    #    path: staging
    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
     - name: View settings.xml
       run: cat /home/runner/.m2/settings.xml
      
     - name: Publish package
       run: mvn --batch-mode deploy 
       env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
