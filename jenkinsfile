#!/usr/bin/env groovy

def values = []
def newrevisionshort
def newrevision
def preinstall

class CommonParams {
    static String urlsvn='http://localhost'
}

pipeline {
    agent any
	tools { 
        maven 'Maven 2.2.1'
        jdk 'JDK 7u80'
    }
    stages {
        stage('Initialize') {
		steps{
			script {
				//cleanWs()
                		LAST_TAG = sh (label: 'Obteniendo ultimo tag', returnStdout: true, script: 'git describe --abbrev=0 --tags').trim()
  				echo "Last TAG: ${LAST_TAG}"
			}
           	}        
        }

        stage('Unit Test') {
            steps{
		echo "TODO"
		//sh 'mvn clean test'
           }        
        }
		
	stage('Build & Static Analysis & Quality Gates') {
          steps{
		  echo "TODO"
               // parallel(install: {
               //     script {
    			//		if(!preinstall) {
    				//	    sh 'mvn install -Ddisable.tests=true -DskipTests=true -Dmaven.test.skip=true'
    			//		}
                 //   }
                //}, sonar: {
                //    node('scanner'){
                //        withSonarQubeEnv('Sonarqube 7.6'){
                //            withEnv(["JAVA_HOME=${env.JAVA_HOME_SLAVE}", "PATH+MAVEN=${env.JAVA_HOME_SLAVE}/bin:${env.JAVA_HOME}/bin"]) {
                //    	        sh "${env.MAVEN_SLAVE}/mvn sonar:sonar"
                //            }
                //        }
				//		timeout(time: 1, unit: "HOURS") {
				//			waitForQualityGate abortPipeline: false
				//		}
				//	}
                //})
            
           }        
        }        
    } //Stages
	
    post { 
		always { 
		    echo "TODO" 
			//junit 'build/reports/**/*.xml'
		    //sh "mkdir -p reports"
		    //publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'reports', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: ''])
		}
        //success { sendEmail('SUCCESS', '&#10004') }
        failure { 
			echo "TODO" 
		}
        //unstable { sendEmail('UNSTABLE', '&#10008') }
    }  // post
} //Pipeline


@NonCPS
def sendEmail(status, symbol) {

    mail to: 'ralbitre@enagas.es',	 
    cc: '',
	bcc: '',
    from: 'Enagas', mimeType: 'text/html', replyTo: '', 
    subject: "${status} CI: PREDICTORES - Job ${env.JOB_NAME}",
    charset: 'UTF-8',
    body:   "<h2><b>Despligue</b></h2> <br>" + 
            "<strong>Apps desplegadas:</strong> values.join(" - ") <br>" +
            "<strong>Version:</strong> ${newrevision}<br>" +
            "<strong>Job Jenkins:</strong> ${env.JOB_NAME} <br>" +
            "<strong>Build Number:</strong> ${env.BUILD_NUMBER} <br>" +
            "<strong>Tiempo total job jenkins:</strong> ${(System.currentTimeMillis() - currentBuild.startTimeInMillis)/1000} segundos<br>" +
            "<strong>Resultado:</strong> ${status}  ${symbol}<br>" +
            "<p>&#9758 <a href='${env.BUILD_URL}'>Acceda al detalle de la tarea</a><br>"; 
}

def strNormalize(str) {
     return str.replace("/", "")     
}

def strPad(num) {
     if(num < 10) {
         return "0" + num
     }
     return num     
}
